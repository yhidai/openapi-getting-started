openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Getting Started
  description: "getting started"
  termsOfService: "under contruction"
servers:
  - url: http://localhost:8081
paths:
  /users:
    get:
      description: Returns all users.
      operationId: listUsers
      parameters:
        - name: active
          in: query
          description: active flag to filter by
          required: false
          style: form
          schema:
            type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      description: Create a new user in the user management service.
      operationId: addUser
      requestBody:
        description: User to add to the system
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /users/${id}:
    get:
      description: Returns a user specified with the id in path
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      description: Update a user specified with the id in path
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User to add to the system
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: update user response
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      description: Delete a user specified with the id in path
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: delete user response
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/UnexpectedError"
          
components:
  schemas:
    User:
      allOf:
        - $ref: '#/components/schemas/NewUser'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
    NewUser:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        active:
          type: boolean
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    UnauthorizedError:
      description: API Key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnexpectedError:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

security:
  - ApiKeyAuth: []


