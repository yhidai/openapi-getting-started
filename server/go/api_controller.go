/*
 * Swagger Getting Started
 *
 * getting started
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A ApiController binds http requests to an api service and writes the service results to the http response
type ApiController struct {
	service DefaultApiServicer
}

// NewApiController creates a default api controller
func NewApiController(s DefaultApiServicer) Router {
	return &ApiController{service: s}
}

// Routes returns all of the api route for the ApiController
func (c *ApiController) Routes() Routes {
	return Routes{
		{
			"AddUser",
			strings.ToUpper("Post"),
			"/users",
			c.AddUser,
		},
		{
			"DeleteUser",
			strings.ToUpper("Delete"),
			"/users/${id}",
			c.DeleteUser,
		},
		{
			"GetUser",
			strings.ToUpper("Get"),
			"/users/${id}",
			c.GetUser,
		},
		{
			"ListUsers",
			strings.ToUpper("Get"),
			"/users",
			c.ListUsers,
		},
		{
			"UpdateUser",
			strings.ToUpper("Put"),
			"/users/${id}",
			c.UpdateUser,
		},
	}
}

// AddUser -
func (c *ApiController) AddUser(w http.ResponseWriter, r *http.Request) {
	newUser := &NewUser{}
	if err := json.NewDecoder(r.Body).Decode(&newUser); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.AddUser(*newUser)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	writeJSONResponse(result, http.StatusCreated, w)
}

// DeleteUser -
func (c *ApiController) DeleteUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, err := parseIntParameter(params["id"])
	if err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.DeleteUser(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	writeJSONResponse(result, http.StatusNoContent, w)
}

// GetUser -
func (c *ApiController) GetUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, err := parseIntParameter(params["id"])
	if err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.GetUser(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	writeJSONResponse(result, http.StatusOK, w)
}

// ListUsers -
func (c *ApiController) ListUsers(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	active := query.Get("active")
	result, err := c.service.ListUsers(active)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	writeJSONResponse(result, http.StatusOK, w)
}

// UpdateUser -
func (c *ApiController) UpdateUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, err := parseIntParameter(params["id"])
	if err != nil {
		w.WriteHeader(500)
		return
	}

	user := &User{}
	if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.UpdateUser(id, *user)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	writeJSONResponse(result, http.StatusOK, w)
}

// writeJSONResponse writes a json format response to http response
func writeJSONResponse(i interface{}, status int, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if status != 0 {
		w.WriteHeader(status)
	} else {
		w.WriteHeader(http.StatusOK)
	}

	return json.NewEncoder(w).Encode(i)
}
